env:
  global:
  - CLOUDSDK_CORE_DISABLE_PROMPTS=1

language: java
sudo: false
addons:
  hosts:
  - db
services:
- docker
install:
- docker build -t database db/.
- docker run --rm -d -e MYSQL_ROOT_PASSWORD=example -p 33060:3306 database
- mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
before_script:
- mvn clean
jobs:
  include:
  - stage: Google Cloud Deploy
    install: skip
    jdk: oraclejdk11
    before_script:
    # Check if Google Cloud SDK is installed.
    - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash
        > /dev/null; fi
    - source $HOME/google-cloud-sdk/path.bash.inc
    # Install Kubernetes control to manage containers
    - gcloud components install kubectl
    - gcloud version
    # Login to our Google Cloud Account using credentials file
    - gcloud auth activate-service-account --key-file client-secret.json
    script:
      # Set the project we will work in.
      - gcloud config set project populatio-237012
      # Set the zone to work in.
      - gcloud config set compute/zone europe-west2-b
      # Assign project ID to a variable to make life easier
      - export PROJECT_ID="$(gcloud config get-value project -q)"
      # Authenticate against Google's Docker image manager.
      - gcloud auth configure-docker
      # Build the database image.
      - docker build -t gcr.io/${PROJECT_ID}/db db/.
      # Push the database image.
      - docker push gcr.io/${PROJECT_ID}/db
      # Build the application
      - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
      # Build the application image
      - docker build -t gcr.io/${PROJECT_ID}/app .
      # Push the application image.
      - docker push gcr.io/${PROJECT_ID}/app
      # Build the web image.
      - docker build -t gcr.io/${PROJECT_ID}/web web/.
      # Push the web image.
      - docker push gcr.io/${PROJECT_ID}/web
      # Create a container cluster.  We only need one node.
      - gcloud container clusters create hr-cluster --num-nodes=1
      # Tell kubernetes to run the built database image, opening port 3306
      - kubectl run db --image=gcr.io/${PROJECT_ID}/db --port 3306
      # Expose database service to the rest of the cluster with name db.
      - kubectl expose deployment db --name=db
      # Tell kubernetes to run the build application image, opening port 8080
      - kubectl run app --image=gcr.io/${PROJECT_ID}/app --port 8080
      # Expose the app service
      - kubectl expose deployment app --name=app
      # Tell kubernetes to run the built web image, opening port 80
      - kubectl run web --image=gcr.io/${PROJECT_ID}/web --port 80
      # Expose the web interface, mapping external port 80 to internal port 80
      - kubectl expose deployment web --port=80 --target-port=80 --type=LoadBalancer
  - stage: unit tests
    install: skip
    jdk: oraclejdk11
    script: mvn test -Dtest=com.napier.sem.AppTest
  - stage: integration tests
    jdk: oraclejdk11
    script: mvn test -Dtest=com.napier.sem.AppIntegrationTest
  - stage: GitHub Release
    install: skip
    jdk: oraclejdk11
    script:
    - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
    - docker-compose up --abort-on-container-exit
    before_deploy:
    - git config --local user.name "Venetsia Krasteva"
    - git config --local user.email "venetsia@icloud.com"
    - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y-%m-%d')-$(git log --format=%h -1)}
    - git tag $TRAVIS_TAG
    deploy:
      provider: releases
      api_key: "$GITHUB_OAUTH_TOKEN"
      file: "$TRAVIS_BUILD_DIR/target/populatio.jar"
      skip_cleanup: true
stages:
- unit tests
- integration tests
- name: GitHub Release
  if: branch = master
- name: Google Cloud Deploy
  if: branch = master
after_success:
- bash <(curl -s https://codecov.io/bash)
before_install:
- openssl aes-256-cbc -K $encrypted_af0f3e35882a_key -iv $encrypted_af0f3e35882a_iv
  -in client-secret.json.enc -out client-secret.json -d
